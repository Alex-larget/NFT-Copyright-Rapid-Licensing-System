// 响应式混入
.respond-to(@breakpoint) when (@breakpoint = sm) {
  @media (min-width: @sm) {
    @content();
  }
}

.respond-to(@breakpoint) when (@breakpoint = md) {
  @media (min-width: @md) {
    @content();
  }
}

.respond-to(@breakpoint) when (@breakpoint = lg) {
  @media (min-width: @lg) {
    @content();
  }
}

.respond-to(@breakpoint) when (@breakpoint = xl) {
  @media (min-width: @xl) {
    @content();
  }
}

// 文本溢出省略
.text-ellipsis(@lines: 1) when (@lines = 1) {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.text-ellipsis(@lines) when (@lines > 1) {
  display: -webkit-box;
  -webkit-line-clamp: @lines;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

// flex布局
.flex(@direction: row, @justify: flex-start, @align: stretch) {
  display: flex;
  flex-direction: @direction;
  justify-content: @justify;
  align-items: @align;
}

// 居中布局
.flex-center() {
  display: flex;
  justify-content: center;
  align-items: center;
} 